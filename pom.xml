<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.mckayERP</groupId>
    <artifactId>condor_downloader</artifactId>
    <version>1.0.04-SNAPSHOT</version>
    <name>condor_downloader</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <javafx.version>21</javafx.version>
        <junit.version>5.9.3</junit.version>
        <mockito.version>5.14.2</mockito.version>
        <selenium.version>4.27.0</selenium.version>
        <jlink-image-name>CondorDownloaderBat</jlink-image-name>
        <warp-image-name>CondorDownloader</warp-image-name>
        <gecko.driver.zip.file>geckodriver-v0.35.0-win32.zip</gecko.driver.zip.file>
        <cd-resources>src\main\resources\org\mckayerp\condor_downloader</cd-resources>
    </properties>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/mckayERP/CondorDownloader/issues</url>
    </issueManagement>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-configuration2</artifactId>
            <version>2.11.0</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.18.0</version>
        </dependency>
        <dependency>
            <groupId>org.commonmark</groupId>
            <artifactId>commonmark</artifactId>
            <version>0.24.0</version>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.5.0</version>
        </dependency>
        <dependency>
            <groupId>io.github.git-commit-id</groupId>
            <artifactId>git-commit-id-maven-plugin</artifactId>
            <version>9.0.1</version>
        </dependency>

    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>${cd-resources}</directory>
                <targetPath>${project.build.directory}\classes\org\mckayerp\condor_downloader</targetPath>
                <excludes>
                    <exclude>${gecko.driver.zip.file}</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>.</directory>
                <targetPath>${project.build.directory}\classes\org\mckayerp\condor_downloader</targetPath>
                <includes>
                    <include>README.md</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <id>customize-jlink</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jlink</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <compress>2</compress>
                    <mainClass>org.mckayerp.condor_downloader/org.mckayerp.condor_downloader.Main</mainClass>
                    <launcher>${jlink-image-name}</launcher>
                    <jlinkZipName>${jlink-image-name}</jlinkZipName>
                    <jlinkImageName>${jlink-image-name}</jlinkImageName>
                    <noManPages>true</noManPages>
                    <stripDebug>true</stripDebug>
                    <noHeaderFiles>true</noHeaderFiles>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.8.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.build.directory}/libs
                            </outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>make_exe_dir</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <mkdir dir="${project.build.directory}\${warp-image-name}"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>add-geckodriver-and-build-install-zip</id>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <delete file="${project.build.directory}\${jlink-image-name}.zip"/>
                                <copy file="${project.basedir}\${cd-resources}\${gecko.driver.zip.file}"
                                      tofile="${project.build.directory}\${gecko.driver.zip.file}"/>
                                <copy file="${project.basedir}\${cd-resources}\logging.properties"
                                      tofile="${project.build.directory}/${jlink-image-name}/conf/logging.properties"
                                      overwrite="true"/>
                                <copy file="${project.basedir}\${cd-resources}\logging.properties"
                                      tofile="${project.build.directory}/${warp-image-name}/conf/logging.properties"
                                      overwrite="true"/>
                                <!-- copy file="${project.build.directory}/${jlink-image-name}/bin/${jlink-image-name}.exe"
                                      tofile="${project.build.directory}/${warp-image-name}/${warp-image-name}.exe"
                                      overwrite="true"/ -->
                                <unzip src="${project.build.directory}/${gecko.driver.zip.file}"
                                       dest="${project.build.directory}/${jlink-image-name}/bin"/>
                                <unzip src="${project.build.directory}/${gecko.driver.zip.file}"
                                       dest="${project.build.directory}/${warp-image-name}/bin/"/>
                                <exec executable="tools/ResourceHacker.exe">
                                    <!-- -open old.exe -save new.exe -action addskip -res my.ico -mask ICONGROUP,MAINICON, -->
                                    <arg value="-open" />
                                    <arg value="${project.build.directory}\${jlink-image-name}\bin\${jlink-image-name}.exe"/>
                                    <arg value="-save"/>
                                    <arg value="${project.build.directory}\${warp-image-name}\${warp-image-name}.exe"/>
                                    <arg value="-action"/>
                                    <arg value="addskip"/>
                                    <arg value="-res"/>
                                    <arg value="${project.basedir}\${cd-resources}\favicon.ico"/>
                                    <arg value="-mask" />
                                    <arg value="ICONGROUP,MAINICON,"/>
                                </exec>
                                <zip destfile="${project.build.directory}/${jlink-image-name}-${project.version}.zip">
                                    <zipfileset dir="${project.build.directory}" includes="${jlink-image-name}/**"/>
                                </zip>
                                <zip destfile="${project.build.directory}/${warp-image-name}.zip">
                                    <zipfileset dir="${project.build.directory}" includes="${warp-image-name}/**"/>
                                </zip>
                                <delete file="${project.build.directory}/${gecko.driver.zip.file}"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <excludes>
                        <exclude/>
                    </excludes>
                </configuration>
            </plugin>
            <!--package image as an exe-->
            <!-- obtain warp-packer.exe from: "https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe" -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <execution>
                        <id>wrap-project</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>tools/warp-packer.exe</executable>
                            <arguments>
                                <argument>--arch</argument>
                                <argument>windows-x64</argument>

                                <argument>--input_dir</argument>
                                <argument>${project.build.directory}/${jlink-image-name}</argument>

                                <argument>--exec</argument>
                                <argument>${project.build.directory}/${jlink-image-name}/bin/${jlink-image-name}.bat
                                </argument>

                                <argument>--output</argument>
                                <argument>${project.build.directory}/${jlink-image-name}/bin/${jlink-image-name}.exe
                                </argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.github.git-commit-id</groupId>
                <artifactId>git-commit-id-maven-plugin</artifactId>
                <version>9.0.1</version>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
                <configuration>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>${cd-resources}/git.properties</generateGitPropertiesFilename>
                    <includeOnlyProperties>
                        <includeOnlyProperty>^git.build.(time|version)$</includeOnlyProperty>
                        <includeOnlyProperty>^git.commit.id.(abbrev|full)$</includeOnlyProperty>
                    </includeOnlyProperties>
                    <commitIdGenerationMode>full</commitIdGenerationMode>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>